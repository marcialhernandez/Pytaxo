<pregunta puntaje="2" tipo="pythonIterativoInvertido" idOrigenEntrada="6" cantidadAlternativas="4" link="1">
        <!--
    " :  &quot;
    ' :  &apos;
    < :  &lt;
    > :  &gt;
    & :  &amp; 

2. Utilizar estructuras de bifurcacion e iteracion.
2.1. Hacer la traza de programas que usen estructuras de control respetando el ambito de las variables.
    -->
<codigo>
<python id="1">
    <text hidden="si">
def eliminaCaracter(stringEntrada, posicion):
    # Se convierte a una lista mutable
    listaDeCaracteres = list(stringEntrada)
    
    # Se elimina la posición indicada
    del listaDeCaracteres[posicion]
    
    # Se reconstruye el string con el caracter eliminado
    #stringEntrada = uneCaracteres(listaDeCaracteres)
    stringEntrada = "".join(listaDeCaracteres)
    
    return stringEntrada</text>
<text>

#Considere que existe una función llamada "eliminaCaracter(stringEntrada, posicion)"
#Donde el primer argumento es el String a modificar y su segundo argumento es un número entero que indica la  posición del caracter a eliminar

def recorrePalabras(stringEntrada):
    posicion = 0
    #Se obtiene largo de la palabra por cada iteración
    while posicion &lt; len (stringEntrada) - 1:
        if stringEntrada[posicion] == 'a':
            stringEntrada = eliminaCaracter(stringEntrada, posicion) 
            posicion = posicion + 2
            if posicion > len(stringEntrada) - 1:
                posicion = len(stringEntrada) - 1
        elif stringEntrada[posicion] == 'b' :
            stringEntrada = eliminaCaracter(stringEntrada, posicion) 
            posicion = posicion - 1
            if posicion &lt; 0:
                posicion = 0
        elif stringEntrada[posicion] == 'c' :
            stringEntrada = eliminaCaracter(stringEntrada, posicion) 
            posicion = posicion - 2
            if posicion &lt; 0 :
                posicion = 0
        else:
            posicion = posicion + 1
    return "camino recorrido"
</text>
<nombreFuncionPrincipal>recorrePalabras</nombreFuncionPrincipal>
<lineaIterativa>while posicion &lt; len (stringEntrada) - 1:</lineaIterativa>
<entrada>stringEntrada = "azzazzzzzc"</entrada>
<entrada>stringEntrada = "afaabbbz"</entrada>
<entrada>stringEntrada = "abbabzzzz"</entrada>
<comentario>Funcion que: 
Adelanta 2 posiciones en caso que la letra sea 'a'
Retrocede 1 posicion en caso que la letra sea 'b'
Retrocede 2 posiciones en caso que la letra sea 'c'
Adelanta 1 posicion en cualquier otro caso
</comentario>
</python>
<python id="2">
    <text>
def consumeYProduce(stockInicial, stringEntrada):
    productosProducidos = 0
    deuda = 0
    productosDisponibles = stockInicial
    posicion = 0
    while posicion != len(stringEntrada):
            
        if deuda > 0 and productosDisponibles > 0:
            deuda = deuda - 1
            productosDisponibles = productosDisponibles - 1

        if stringEntrada[posicion] == 'c':
            if productosDisponibles == 0:
                deuda = deuda + 1
            else:
                productosDisponibles = productosDisponibles - 1        
        else:
            productosDisponibles = productosDisponibles + 1
            productosProducidos = productosProducidos + 1

        posicion = posicion + 1
        
        if posicion == len(stringEntrada) and deuda > 0:
            productosDisponibles = productosDisponibles + len(stringEntrada) / 2 + 1
            posicion = 0
                
    return productosProducidos
</text>
<nombreFuncionPrincipal>consumeYProduce</nombreFuncionPrincipal>
<lineaIterativa>while posicion != len(stringEntrada):</lineaIterativa>
<entrada>stockInicial = 0;stringEntrada = "ppcc"</entrada>
<entrada>stockInicial = 0;stringEntrada = "ppccc"</entrada>
<entrada>stockInicial = 1;stringEntrada = "ppcccc"</entrada>
<entrada>stockInicial = 2;stringEntrada = "ppcccc"</entrada>
<entrada>stockInicial = 0;stringEntrada = "pccc"</entrada>
<comentario>Funcion que itera sobre el string hasta que no tenga deuda
En caso que la letra sea c: consume 1. Si no hay stock, genera deuda
En caso contrario, produce 1.
Si al terminar de leer el string tiene deuda, se agrega un stock igual a
la mitad del largo del string + 1, y empieza a leer el string de entrada
desde el principio.
</comentario>
</python>
</codigo>
</pregunta>